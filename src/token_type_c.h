#include <regex.h>

#ifndef JD297_CC_TOKEN_TYPE_C_H
#define JD297_CC_TOKEN_TYPE_C_H

typedef enum TokenType_C {
    T_MACRO_INCLUDE_FILE,

    /* COMMENTS */
    T_COMMENT_LINE,
    T_COMMENT_MULTILINE,

    /* ASSIGNMENT */
    T_PLUS_ASSIGN,
    T_MINUS_ASSIGN,
    T_MULTIPLY_ASSIGN,
    T_DIVIDE_ASSIGN,
    T_MODULUS_ASSIGN,
    T_BITWISE_AND_ASSIGN,
    T_BITWISE_OR_ASSIGN,
    T_BITWISE_XOR_ASSIGN,
    T_BITWISE_RIGHTSHIFT_ASSIGN,
    T_BITWISE_LEFTSHIFT_ASSIGN,

    /* RELATIONAL */
    T_LESS_THAN_OR_EQUAL_TO,
    T_GREATER_THAN_OR_EQUAL_TO,
    T_EQUAL_TO,
    T_NOT_EQUAL_TO,

    /* LOGICAL */
    T_LOGICAL_AND,
    T_LOGICAL_OR,
    T_LOGICAL_NOT,

    /* BITWISE */
    T_BITWISE_AND,
    T_BITWISE_OR,
    T_BITWISE_XOR,
    T_BITWISE_LEFTSHIFT,
    T_BITWISE_RIGHTSHIFT,

    T_LESS_THAN,
    T_GREATER_THAN,

    /* SYMBOLS */
    T_DOT_DOT_DOT,
    T_OPEN_BRACKET,
    T_CLOSING_BRACKET,
    T_OPEN_PARENT,
    T_CLOSING_PARENT,
    T_OPEN_BRACE,
    T_CLOSING_BRACE,
    T_DOT,
    T_ARROW,
    T_COMMA,
    T_COLON,
    T_SEMICOLON,
    T_ASSIGNMENT,
    T_TILDE,

    /* OPERATORS */
    /* ARITHMETRIC */
    T_INCREMENT,
    T_DECREMENT,
    T_PLUS,
    T_MINUS,
    T_MULTIPLY,
    T_DIVIDE,
    T_MODULUS,

    /* CONDITIONAL */
    T_TERNARY,

    /* NORMAL KEYWORDS */
    T_ALIGNAS,
    T_ALIGNOF,
    T_AUTO,
    T_BOOL,
    T_BREAK,
    T_CASE,
    T_CHAR,
    T_CONST,
    T_CONSTEXPR,
    T_CONTINUE,
    T_DEFAULT,
    T_DO,
    T_DOUBLE,
    T_ELSE,
    T_ENUM,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOR,
    T_GOTO,
    T_IF,
    T_INLINE,
    T_INT,
    T_LONG,
    T_NULLPTR,
    T_REGISTER,
    T_RESTRICT,
    T_RETURN,
    T_SHORT,
    T_SIGNED,
    T_SIZEOF,
    T_STATIC,
    T_STATIC_ASSERT,
    T_STRUCT,
    T_SWITCH,
    T_THREAD_LOCAL,
    T_TRUE,
    T_TYPEDEF,
    T_TYPEOF,
    T_TYPEOF_UNQUAL,
    T_UNION,
    T_UNSIGNED,
    T_VOID,
    T_VOLATILE,
    T_WHILE,

    /* PREPROCESSOR KEYWORDS*/
    T_MACRO_IFDEF,
    T_MACRO_IFNDEF,
    T_MACRO_IF,
    T_MACRO_ELIFDEF,
    T_MACRO_ELIFNDEF,
    T_MACRO_ELIF,
    T_MACRO_ELSE,
    T_MACRO_ENDIF,
    T_MACRO_DEFINE,
    T_MACRO_UNDEF,
    T_MACRO_INCLUDE,
    T_MACRO_LINE,
    T_MACRO_ERROR,
    T_MACRO_PRAGMA,
    T_MACRO_DEFINDED,
    T_MACRO_HAS_INCLUDE,
    T_MACRO_ASM,

    /* WHITESPACE */
    T_WHITESPACE,

    /* TOKENS */
    T_NUMBER,
    T_STRING,
    T_CHARACTER,
    T_IDENTIFIER,

    T_EOF,
    T_MACRO_TOKEN_SEQUENZE,

    TOKEN_TYPE_C_LENGTH
} TokenType_C;

#ifdef TOKEN_TYPE_SKIPABLE_LOOKUP_GENERATOR

#define TOKEN_TYPE_SKIPABLE_SIZE 3

const TokenType_C token_type_skipable[TOKEN_TYPE_SKIPABLE_SIZE] = {
    T_WHITESPACE,
    T_COMMENT_LINE,
    T_COMMENT_MULTILINE
};
#endif

extern const int token_type_skipable_lookup[TOKEN_TYPE_C_LENGTH];

extern regex_t **token_type_c_regex;

extern int token_type_c_regex_create(void);

extern void token_type_c_regex_destroy(void);

#endif
